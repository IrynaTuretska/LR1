from functools import reduce

# Зразкові дані (їх слід замінити на реальні дані)
X = [(1, 2), (2, 3), (5, 6), (7, 8), (3, 4)]
num_clusters = 2

# Визначте функцію відстані
def відстань(a, b):
    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5

# Функція відображення
def функція_відображення(data):
    # Розрахуйте відстані між кожною парою точок
    відстані = []
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            відстані.append((i, j, відстань(data[i], data[j])))
    return відстані

# Функція зведення
def функція_зведення(відстані):
    # Сортуємо відстані
    відстані.sort(key=lambda x: x[2])

    # Ініціалізуємо кластери
    кластери = {i: [i] for i in range(len(X))}

    # Об'єднуємо найближчі точки до досягнення бажаної кількості кластерів
    for i, j, відстань in відстані:
        if len(кластери) == num_clusters:
            break
        if i in кластери and j in кластери and кластери[i] != кластери[j]:
            кластери[i] += кластери[j]
            del кластери[j]

    # Призначаємо ідентифікатори кластерів кожній точці даних
    відображення_кластеру = {}
    for cluster_id, points in кластери.items():
        for point in points:
            відображення_кластеру[point] = cluster_id

    return відображення_кластеру

# Запустіть MapReduce
відстані = функція_відображення(X)
відображення_кластеру = функція_зведення(відстані)

print("Відображення кластерів:", відображення_кластеру)
